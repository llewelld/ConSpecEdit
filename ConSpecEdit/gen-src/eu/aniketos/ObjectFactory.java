//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.04.03 at 02:41:26 AM BST 
//


package eu.aniketos;

import java.math.BigInteger;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the eu.aniketos package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _AssignTypeValueAppend_QNAME = new QName("", "append");
    private final static QName _AssignTypeValueOr_QNAME = new QName("", "or");
    private final static QName _AssignTypeValueBconst_QNAME = new QName("", "bconst");
    private final static QName _AssignTypeValueMod_QNAME = new QName("", "mod");
    private final static QName _AssignTypeValueInvocation_QNAME = new QName("", "invocation");
    private final static QName _AssignTypeValueSum_QNAME = new QName("", "sum");
    private final static QName _AssignTypeValueEqual_QNAME = new QName("", "equal");
    private final static QName _AssignTypeValueMul_QNAME = new QName("", "mul");
    private final static QName _AssignTypeValueSconst_QNAME = new QName("", "sconst");
    private final static QName _AssignTypeValueLessequalthan_QNAME = new QName("", "lessequalthan");
    private final static QName _AssignTypeValueAnd_QNAME = new QName("", "and");
    private final static QName _AssignTypeValueNot_QNAME = new QName("", "not");
    private final static QName _AssignTypeValueMorequalthan_QNAME = new QName("", "morequalthan");
    private final static QName _AssignTypeValueLessthan_QNAME = new QName("", "lessthan");
    private final static QName _AssignTypeValueDif_QNAME = new QName("", "dif");
    private final static QName _AssignTypeValueMorethan_QNAME = new QName("", "morethan");
    private final static QName _AssignTypeValueIdentifier_QNAME = new QName("", "identifier");
    private final static QName _AssignTypeValueNotequal_QNAME = new QName("", "notequal");
    private final static QName _AssignTypeValueIconst_QNAME = new QName("", "iconst");
    private final static QName _RuleTypeAfter_QNAME = new QName("", "after");
    private final static QName _RuleTypeBefore_QNAME = new QName("", "before");
    private final static QName _RuleTypeExceptional_QNAME = new QName("", "exceptional");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: eu.aniketos
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link DeclType }
     * 
     */
    public DeclType createDeclType() {
        return new DeclType();
    }

    /**
     * Create an instance of {@link ReactionType }
     * 
     */
    public ReactionType createReactionType() {
        return new ReactionType();
    }

    /**
     * Create an instance of {@link InvocationType }
     * 
     */
    public InvocationType createInvocationType() {
        return new InvocationType();
    }

    /**
     * Create an instance of {@link AssignType }
     * 
     */
    public AssignType createAssignType() {
        return new AssignType();
    }

    /**
     * Create an instance of {@link Specification }
     * 
     */
    public Specification createSpecification() {
        return new Specification();
    }

    /**
     * Create an instance of {@link StateType }
     * 
     */
    public StateType createStateType() {
        return new StateType();
    }

    /**
     * Create an instance of {@link RuleType }
     * 
     */
    public RuleType createRuleType() {
        return new RuleType();
    }

    /**
     * Create an instance of {@link Binary }
     * 
     */
    public Binary createBinary() {
        return new Binary();
    }

    /**
     * Create an instance of {@link WhenType }
     * 
     */
    public WhenType createWhenType() {
        return new WhenType();
    }

    /**
     * Create an instance of {@link PerformType }
     * 
     */
    public PerformType createPerformType() {
        return new PerformType();
    }

    /**
     * Create an instance of {@link UpdateType }
     * 
     */
    public UpdateType createUpdateType() {
        return new UpdateType();
    }

    /**
     * Create an instance of {@link Unary }
     * 
     */
    public Unary createUnary() {
        return new Unary();
    }

    /**
     * Create an instance of {@link AfterType }
     * 
     */
    public AfterType createAfterType() {
        return new AfterType();
    }

    /**
     * Create an instance of {@link ParameterType }
     * 
     */
    public ParameterType createParameterType() {
        return new ParameterType();
    }

    /**
     * Create an instance of {@link DeclType.Value }
     * 
     */
    public DeclType.Value createDeclTypeValue() {
        return new DeclType.Value();
    }

    /**
     * Create an instance of {@link ReactionType.Guard }
     * 
     */
    public ReactionType.Guard createReactionTypeGuard() {
        return new ReactionType.Guard();
    }

    /**
     * Create an instance of {@link InvocationType.Argument }
     * 
     */
    public InvocationType.Argument createInvocationTypeArgument() {
        return new InvocationType.Argument();
    }

    /**
     * Create an instance of {@link AssignType.Value }
     * 
     */
    public AssignType.Value createAssignTypeValue() {
        return new AssignType.Value();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = AssignType.Value.class)
    public JAXBElement<Boolean> createAssignTypeValueBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = AssignType.Value.class)
    public JAXBElement<InvocationType> createAssignTypeValueInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueSum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = AssignType.Value.class)
    public JAXBElement<String> createAssignTypeValueSconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = AssignType.Value.class)
    public JAXBElement<Unary> createAssignTypeValueNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = AssignType.Value.class)
    public JAXBElement<String> createAssignTypeValueIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = AssignType.Value.class)
    public JAXBElement<Binary> createAssignTypeValueNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = AssignType.Value.class)
    public JAXBElement<BigInteger> createAssignTypeValueIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, AssignType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = Unary.class)
    public JAXBElement<Binary> createUnaryAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = Unary.class)
    public JAXBElement<Binary> createUnaryOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = Unary.class)
    public JAXBElement<Boolean> createUnaryBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = Unary.class)
    public JAXBElement<Binary> createUnaryMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = Unary.class)
    public JAXBElement<InvocationType> createUnaryInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = Unary.class)
    public JAXBElement<Binary> createUnarySum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = Unary.class)
    public JAXBElement<Binary> createUnaryEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = Unary.class)
    public JAXBElement<Binary> createUnaryMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = Unary.class)
    public JAXBElement<String> createUnarySconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = Unary.class)
    public JAXBElement<Binary> createUnaryLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = Unary.class)
    public JAXBElement<Binary> createUnaryAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = Unary.class)
    public JAXBElement<Unary> createUnaryNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = Unary.class)
    public JAXBElement<Binary> createUnaryMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = Unary.class)
    public JAXBElement<Binary> createUnaryLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = Unary.class)
    public JAXBElement<Binary> createUnaryDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = Unary.class)
    public JAXBElement<Binary> createUnaryMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = Unary.class)
    public JAXBElement<String> createUnaryIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = Unary.class)
    public JAXBElement<Binary> createUnaryNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = Unary.class)
    public JAXBElement<BigInteger> createUnaryIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, Unary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AfterType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "after", scope = RuleType.class)
    public JAXBElement<AfterType> createRuleTypeAfter(AfterType value) {
        return new JAXBElement<AfterType>(_RuleTypeAfter_QNAME, AfterType.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WhenType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "before", scope = RuleType.class)
    public JAXBElement<WhenType> createRuleTypeBefore(WhenType value) {
        return new JAXBElement<WhenType>(_RuleTypeBefore_QNAME, WhenType.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WhenType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "exceptional", scope = RuleType.class)
    public JAXBElement<WhenType> createRuleTypeExceptional(WhenType value) {
        return new JAXBElement<WhenType>(_RuleTypeExceptional_QNAME, WhenType.class, RuleType.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = Binary.class)
    public JAXBElement<Binary> createBinaryAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = Binary.class)
    public JAXBElement<Binary> createBinaryOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = Binary.class)
    public JAXBElement<Boolean> createBinaryBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = Binary.class)
    public JAXBElement<Binary> createBinaryMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = Binary.class)
    public JAXBElement<InvocationType> createBinaryInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = Binary.class)
    public JAXBElement<Binary> createBinarySum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = Binary.class)
    public JAXBElement<Binary> createBinaryEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = Binary.class)
    public JAXBElement<Binary> createBinaryMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = Binary.class)
    public JAXBElement<String> createBinarySconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = Binary.class)
    public JAXBElement<Binary> createBinaryLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = Binary.class)
    public JAXBElement<Binary> createBinaryAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = Binary.class)
    public JAXBElement<Unary> createBinaryNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = Binary.class)
    public JAXBElement<Binary> createBinaryMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = Binary.class)
    public JAXBElement<Binary> createBinaryLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = Binary.class)
    public JAXBElement<Binary> createBinaryDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = Binary.class)
    public JAXBElement<Binary> createBinaryMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = Binary.class)
    public JAXBElement<String> createBinaryIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = Binary.class)
    public JAXBElement<Binary> createBinaryNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = Binary.class)
    public JAXBElement<BigInteger> createBinaryIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, Binary.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = DeclType.Value.class)
    public JAXBElement<Boolean> createDeclTypeValueBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = DeclType.Value.class)
    public JAXBElement<InvocationType> createDeclTypeValueInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueSum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = DeclType.Value.class)
    public JAXBElement<String> createDeclTypeValueSconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = DeclType.Value.class)
    public JAXBElement<Unary> createDeclTypeValueNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = DeclType.Value.class)
    public JAXBElement<String> createDeclTypeValueIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = DeclType.Value.class)
    public JAXBElement<Binary> createDeclTypeValueNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = DeclType.Value.class)
    public JAXBElement<BigInteger> createDeclTypeValueIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, DeclType.Value.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = InvocationType.Argument.class)
    public JAXBElement<Boolean> createInvocationTypeArgumentBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = InvocationType.Argument.class)
    public JAXBElement<InvocationType> createInvocationTypeArgumentInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentSum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = InvocationType.Argument.class)
    public JAXBElement<String> createInvocationTypeArgumentSconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = InvocationType.Argument.class)
    public JAXBElement<Unary> createInvocationTypeArgumentNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = InvocationType.Argument.class)
    public JAXBElement<String> createInvocationTypeArgumentIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = InvocationType.Argument.class)
    public JAXBElement<Binary> createInvocationTypeArgumentNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = InvocationType.Argument.class)
    public JAXBElement<BigInteger> createInvocationTypeArgumentIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, InvocationType.Argument.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "append", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardAppend(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAppend_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "or", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardOr(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueOr_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Boolean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "bconst", scope = ReactionType.Guard.class)
    public JAXBElement<Boolean> createReactionTypeGuardBconst(Boolean value) {
        return new JAXBElement<Boolean>(_AssignTypeValueBconst_QNAME, Boolean.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mod", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardMod(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMod_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InvocationType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "invocation", scope = ReactionType.Guard.class)
    public JAXBElement<InvocationType> createReactionTypeGuardInvocation(InvocationType value) {
        return new JAXBElement<InvocationType>(_AssignTypeValueInvocation_QNAME, InvocationType.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sum", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardSum(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueSum_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "equal", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardEqual(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueEqual_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "mul", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardMul(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMul_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "sconst", scope = ReactionType.Guard.class)
    public JAXBElement<String> createReactionTypeGuardSconst(String value) {
        return new JAXBElement<String>(_AssignTypeValueSconst_QNAME, String.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessequalthan", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardLessequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessequalthan_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "and", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardAnd(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueAnd_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Unary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "not", scope = ReactionType.Guard.class)
    public JAXBElement<Unary> createReactionTypeGuardNot(Unary value) {
        return new JAXBElement<Unary>(_AssignTypeValueNot_QNAME, Unary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morequalthan", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardMorequalthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorequalthan_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "lessthan", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardLessthan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueLessthan_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "dif", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardDif(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueDif_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "morethan", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardMorethan(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueMorethan_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "identifier", scope = ReactionType.Guard.class)
    public JAXBElement<String> createReactionTypeGuardIdentifier(String value) {
        return new JAXBElement<String>(_AssignTypeValueIdentifier_QNAME, String.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binary }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "notequal", scope = ReactionType.Guard.class)
    public JAXBElement<Binary> createReactionTypeGuardNotequal(Binary value) {
        return new JAXBElement<Binary>(_AssignTypeValueNotequal_QNAME, Binary.class, ReactionType.Guard.class, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "", name = "iconst", scope = ReactionType.Guard.class)
    public JAXBElement<BigInteger> createReactionTypeGuardIconst(BigInteger value) {
        return new JAXBElement<BigInteger>(_AssignTypeValueIconst_QNAME, BigInteger.class, ReactionType.Guard.class, value);
    }

}
