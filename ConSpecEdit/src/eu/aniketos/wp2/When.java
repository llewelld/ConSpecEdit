/**
 * Copyright 2012  David Llewellyn-Jones <D.Llewellyn-Jones@ljmu.ac.uk>
 * Liverpool John Moores University <http://www.ljmu.ac.uk/cmp/>
 * Aniketos Project <http://www.aniketos.eu>
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either 
 * version 3 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. If not, see <http://www.gnu.org/licenses/>.
 *
 */

package eu.aniketos.wp2;

import java.util.Iterator;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;

import eu.aniketos.*;

/**
 * Class that wraps the WhenType and AfterType classes with a more usable interface
 * We don't change the WhenType and AfterType directly since they're autogenerated
 * @author Aniketos Project; David Llewellyn-Jones, Liverpool John Moores University
 *
 */
public class When {
	/**
	 * The original element created by JAXB that we're providing a wrapper to.
	 */
	JAXBElement<? extends WhenType> when;
	
	/**
	 * Class initialiser.
	 * Creates a When class to wrap the WhenType or AfterType embedded in the provided Rule.
	 * @param rule The rule to extract the When details from.
	 */
	public When(RuleType rule) {
		this.when = rule.getBeforeOrAfterOrExceptional();
	}

	/**
	 * Convert the When class from one type to another based on when the rule should be triggered.
	 * The class must be converted since 'after' actions must store the 'return' parameter,
	 * whereas 'before' and 'exceptional' actions don't need this.
	 * It would be easier if we could just have a single class for all three (which would be just fine)
	 * except that these classes were generated by JAXB, so we don't really want to change them.
	 * @param type The type of action: "before", "after" or "exceptional".
	 */
	public void convertType(String type) {
		QName name = new QName(type);
		// Check the type of the current When object.
		if (type.equals("after")) {
			// Create a new When object.
			AfterType whenNew = new AfterType ();
			// Transfer across the information from the old object to the new one.
			whenNew.setIdentifier(when.getValue().getIdentifier());
			Iterator<ParameterType> paramIter = when.getValue().getParameter().iterator();
			ParameterType param;
			while (paramIter.hasNext()) {
				param = paramIter.next();
				whenNew.getParameter().add(param);
			}
			// Since this is an 'after' action it needs return parameter data.
			// Set up some initial values for these.
			ParameterType newReturn = new ParameterType();
			newReturn.setIdentifier("");
			newReturn.setType("void");
			whenNew.setReturn(newReturn);
			JAXBElement<AfterType> whenSwitch = new JAXBElement<AfterType>(name, AfterType.class, whenNew);
			// Change the when object to the new version we just created.
			// The previous object will eventually be cleaned up by the garbage collector.
			when = whenSwitch;
		}
		else {
			// Create a new When object.
			WhenType whenNew = new WhenType ();
			// Transfer across the information from the old object to the new one.
			whenNew.setIdentifier(when.getValue().getIdentifier());
			Iterator<ParameterType> paramIter = when.getValue().getParameter().iterator();
			ParameterType param;
			while (paramIter.hasNext()) {
				param = paramIter.next();
				whenNew.getParameter().add(param);
			}
			JAXBElement<WhenType> whenSwitch = new JAXBElement<WhenType>(name, WhenType.class, whenNew); 
			// Change the when object to the new version we just created.
			// The previous object will eventually be cleaned up by the garbage collector.
			when = whenSwitch;
		}
	}
	
	/**
	 * Returns the type of the assignment for this When clause.
	 * @return The when type as a String, should be one of "before", "after" or "exceptional". 
	 */
	public String getType () {
		return when.getName().getLocalPart();
	}

	/**
	 * Returns the identifier of the when clause. This is usually a method name.
	 * @return The method name that the clause applies to.
	 */
	public String getIdentifier () {
		return when.getValue().getIdentifier();
	}
	
	/**
	 * Sets the identifier of the when clause. This is usually a method name.
	 * @param identifier The method name that the clause applies to.
	 */
	public void setIdentifier (String identifier) {
		when.getValue().setIdentifier(identifier);
	}
	
	/**
	 * Returns the parameter list associated with the When clause.
	 * @return A list of the parameters that must apply for the clause to hold.
	 */
	public List<ParameterType> getParameters() {
		return when.getValue().getParameter();
	}
	
	/**
	 * If the When clause applies "after", then this specifies the parameter requirements for the clause.
	 * @return The return parameter details for an "after" clause or null otherwise.
	 */
	public ParameterType getReturn() {
		ParameterType returnParam;
		
		if ("after".equals(getType())) {
			// If it's an "after" clause, provide details of the return type
			@SuppressWarnings("unchecked")
			JAXBElement<AfterType> after = (JAXBElement<AfterType>)when;
			returnParam = after.getValue().getReturn();
			
		}
		else {
			// If it's not an "after" clause, then there is no return parameter
			returnParam = null;
		}
		
		// Return the clause.
		return returnParam;
	}
	
	/**
	 * Get the JAXBElement When object that this object is wrapping.
	 * @return The object being wrapped.
	 */
	public JAXBElement<? extends WhenType> getBeforeOrAfterOrException() {
		return when;
	}

}
